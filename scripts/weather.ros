#!/usr/bin/env sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(usocket #:com.inuoe.jzon) :silent t))

(defpackage :ros.script.new-weather
  (:use :cl))
(in-package :ros.script.new-weather)

(defun cut-protocol (url)
  (let ((pos (search "://" url :test #'char=)))
    (if pos
        (subseq url (+ pos 3))
        url)))

(defstruct http-response
  status
  body)

(defun parse-status (header)
  (let ((parts (uiop:split-string header :separator " ")))
    (parse-integer (second parts))))

(defun http-get (url)
  (let* ((loc (cut-protocol url))
         (slash-pos (position #\/ loc))
         (host (if slash-pos (subseq loc 0 slash-pos) loc)) ;; cut off ip
         (path (if slash-pos (subseq loc slash-pos) "/")) ;; cut off until /
         (socket (usocket:socket-connect host 80))
         status
         body)
    (unwind-protect
      (let ((stream (usocket:socket-stream socket))
            (fmt (format nil "GET ~a HTTP/1.0~%Host: ~a~%Connection: close~%~%~%" path host)))
        (format stream "~a" fmt)
        (finish-output stream)
        (setf status (parse-status (read-line stream)))
        ;; read until body
        (loop for line = (read-line stream)
              until (and line (string= (string-trim '(#\Space #\Tab #\Return #\Newline) line) "")))
        (setf body
              (with-output-to-string (b)
                (loop for line = (read-line stream nil nil)
                      while line
                      do (format b "~a~%" line)))))
    (when socket (usocket:socket-close socket)))
  (make-http-response :status status :body body)))

(defstruct geo-info
  lon
  lat
  country
  city)

(defun fetch-geo-location ()
  (let* ((resp (http-get "http://ip-api.com/json/"))
         (data (com.inuoe.jzon:parse (http-response-body resp))))
    (make-geo-info :lon (format nil "~,4f" (gethash "lon" data))
                   :lat (format nil "~,4f" (gethash "lat" data))
                   :country (gethash "country" data)
                   :city (gethash "city" data))))

;; disgusting ugly hack, but i have no clue how i can do this in a simple way with jzon
;; also it's just simpler this way. If you wanna complain about, make measurements
;; and provide a fix that shows, that it's only marginally worse in terms of perf
(defun add-country-city (geo-data resp)
  (format nil "{\"country\":\"~a\",\"city\":\"~a\",~a"
          (geo-info-country geo-data)
          (geo-info-city geo-data)
          (subseq resp 1)))

(defun fetch-weather (geo-data)
  (let* ((url (format nil "http://api.open-meteo.com/v1/forecast?latitude=~a&longitude=~a&current=is_day,apparent_temperature,relative_humidity_2m,temperature_2m,precipitation,rain,weather_code,wind_speed_10m,wind_direction_10m,snowfall,showers&timezone=auto&timeformat=unixtime" (geo-info-lat geo-data) (geo-info-lon geo-data)))
         (resp (http-get url)))
       (add-country-city geo-data (http-response-body resp))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "~a~%" (fetch-weather (fetch-geo-location))))

